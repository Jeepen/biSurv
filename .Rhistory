aaj <- prodlim(Hist(time, cause) ~ platelet, data = bmt)
plot(aaj)
plot(aaj, ylim = c(0,70))
plot(aaj, ylim = c(0,.70))
plot(aaj)
aaj$var.cuminc$`1`
length(aaj$var.cuminc$`1`)
?prodlim
head(bmt)
aaj0 <- prodlim(Hist(time, cause) ~ platelet, data = bmt, subset = (bmt$platelet == 0))
predaaj0 <- predict(aaj0, newdata = newdata, times = 5, type = "cuminc")
predaaj0 <- predict(aaj0, times = 5, type = "cuminc")
aaj0 <- prodlim(Hist(time, cause) ~ 1, data = bmt, subset = (bmt$platelet == 0))
predaaj0 <- predict(aaj0, times = 5, type = "cuminc")
predaaj0
predaaj$`1`
predaaj
predaaj0
predaaj <- predict(aaj, newdata = newdata, times = 5, type = "cuminc")
predaaj
predaaj
predaaj0
aaj0$se.cuminc
max(aaj0$se.cuminc$`1`[aaj0$time<=5])
aaj0$se.cuminc$`1`[aaj0$time<=5]
aaj0 <- prodlim(Hist(time, cause) ~ 1, data = bmt, subset = (bmt$platelet == 0))
predaaj0 <- predict(aaj0, times = 5, type = "cuminc")
SE0 <- max(aaj0$se.cuminc$`1`[aaj0$time<=5])
aaj1 <- prodlim(Hist(time, cause) ~ 1, data = bmt, subset = (bmt$platelet == 1))
predaaj1 <- predict(aaj1, times = 5, type = "cuminc")
SE1 <- max(aaj1$se.cuminc$`1`[aaj1$time<=5])
predaaj0
predaaj0$`1`
h <- c(predaaj0$`1`/predaaj1$`1`, -1/predaaj0$`1`)
RRSE <- sqrt((t(h) %*% Sigma %*% h)[1,1])
Sigma <- matrix(c(SE0^2,0,0,SE1^2), nrow = 2)
h <- c(predaaj0$`1`/predaaj1$`1`, -1/predaaj0$`1`)
RRSE <- sqrt((t(h) %*% Sigma %*% h)[1,1])
predaaj0$`1`/predaaj1$`1`*exp(c(0, -qnorm(.975), qnorm(.975)) * RRSE)
sqrt((t(h) %*% Sigma %*% h)[1,1])
h
Sigma
p0SE
sqrt(Sigma)
p1SE
max(aaj0$cuminc$`1`[aaj0$time<=5])
predaaj0
max(aaj0$cuminc$`1`[aaj0$time<=5])
predaaj0$`1`
p0 <- max(aaj0$cuminc$`1`[aaj0$time <= 5])
p0
p1 <- max(aaj1$cuminc$`1`[aaj1$time <= 5])
p1
h <- c(p0/p1, -1/p1)
RRSE <- sqrt((t(h) %*% Sigma %*% h)[1,1])
Sigma <- matrix(c(SE0^2,0,0,SE1^2), nrow = 2)
h <- c(p0/p1, -1/p0)
RRSE <- sqrt((t(h) %*% Sigma %*% h)[1,1])
p0/p1*exp(c(0, -qnorm(.975), qnorm(.975)) * RRSE)
plot(aaj)
?plot.prodlim
plot(aaj)
plot(aaj, cause = 2)
qplot(time, value, colour = variable, geom = 'step', data = melted) + xlim(0,preds$time[length(preds$time)-4]) + #ylim(0,1) +
geom_step(aes(x = time, y = c(plwr[1,], plwr[2,]))) +
geom_step(aes(x = time, y = c(pupr[1,], pupr[2,])))
aaj <- prodlim(Hist(time, cause) ~ platelet, data = bmt)
predaaj <- predict(aaj, newdata = newdata, times = 5, type = "cuminc")
predaaj$`1`$`platelet=0`
plot(aaj, cause = 2)
plot(aaj, cause = 1)
library(landest)
d <- example.rct
d <- example.rct()
?example_rct
data("example_rct")
rm(list = ls())
data("example_rct")
head(example_rct)
unique(example_rct$treat)
summary(example_rct)
sub <- subset(example_rct, TL > .8)
sub <- transform(sub, DSnew = ifelse(DS = 1 & TS <= .8, 1, 0))
sub <- transform(sub, DSnew = ifelse((DS = 1 & TS <= .8), 1, 0))
head(sub)
model <- prodlim(Hist(TL, DL) ~ DSnew, data = sub)
plot(model)
sub <- subset(example_rct, TL > .8)
sub <- transform(sub, DSnew = ifelse((DS = 1 & TS <= .8), 1, 0), timenew = time - .8)
str(example_rct)
sub <- transform(sub, DSnew = ifelse((DS = 1 & TS <= .8), 1, 0), timenew = TL - .8)
model <- prodlim(Hist(TL, DL) ~ DSnew, data = sub)
plot(model)
model <- prodlim(Hist(timenew, DL) ~ DSnew, data = sub)
plot(model)
library(Rtools)
ls()
library(RcppArmadillo)
install.packages("Rtools")
library(devtools)
q()
q()
n
ko <- function(a = 2, b = a+2){
a+b
}
ko()
ko(b = 3)
rm(ko)
A <- list()
A
A <- list(for(i in 1:3) paste0("A", i))
A
A <- list(for(i in 1:3) {paste0("A", i)})
A
Sys.time()
?coxph
library(survival)
?coxph
?Surv
?aggregate
install.packages(copula)
install.packages("copula")
library(copula)
install.packages('copula')
getwd()
2+2
citation()
LETTERS
rbinom(5)
rbinom(1:26, 5)
rbinom(1:26, 5)
rbinom(1:26, 5, prob = .5)
rbinom(5, 26, prob = .5)
rbinom(5, 0:1, prob = .5)
rbinom(5, prob = .5)
rbinom(5, size = 1,prob = .5)
rbinom(5, size = 1,prob = .5)
rbinom(5, size = 1,prob = .5)
rbinom(5, 1,prob = .5)
rbinom(5, 1,.5)
rbinom(5, 1,.5)
rbinom(5, 1,.5)
LETTERS(1)
letters(1)
LETTERS
sample(LETTERS,1)
sample(0:9,1)
codeFunction(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
x[i] <- (index[i] == 1) * sample(LETTERS, 1) + (index[i] == 0) * sample(0:9, 1)
}
x
}
codeFunction(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
x[i] <- (index[i] == 1) * sample(LETTERS, 1) + (index[i] == 0) * sample(0:9, 1)
}
x
}
codeFunction <- function(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
x[i] <- (index[i] == 1) * sample(LETTERS, 1) + (index[i] == 0) * sample(0:9, 1)
}
x
}
codeFunction(5)
x <- rep(NA, n)
n <- 5
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
x[i] <- (index[i] == 1) * sample(LETTERS, 1) + (index[i] == 0) * sample(0:9, 1)
}
index[1] == 1
index
codeFunction <- function(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
if(index[i] == 1){
x[i] <- sample(LETTERS, 1)
}
else{
x[i] <- sample(0:9, 1)
}
}
x
}
codeFunction(5)
codeFunction <- function(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
if(index[i] == 1){
x[i] <- sample(LETTERS, 1)
}
else{
x[i] <- sample(0:9, 1)
}
}
paste(x)
}
codeFunction(5)
codeFunction <- function(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
if(index[i] == 1){
x[i] <- sample(LETTERS, 1)
}
else{
x[i] <- sample(0:9, 1)
}
}
paste0(x)
}
codeFunction(5)
x <- ""
paste0(x, "2")
paste0(x, "2", "4")
codeFunction <- function(n){
x <- ""
index <- rbinom(n, 1,.5)
for(i in 1:n){
if(index[i] == 1){
x <- paste0(x, sample(LETTERS, 1))
}
else{
x <- paste0(x, sample(0:9, 1))
}
}
paste0(x)
}
codeFunction(5)
?rbinom
codeFunction <- function(n, probs = .5){
x <- ""
index <- rbinom(n, 1, prob = probs)
for(i in 1:n){
if(index[i] == 1){
x <- paste0(x, sample(LETTERS, 1))
}
else{
x <- paste0(x, sample(0:9, 1))
}
}
paste0(x)
}
codeFunction(5)
codeFunction <- function(n, probs = .5, nr = 1){
set.seed(nr)
x <- ""
index <- rbinom(n, 1, prob = probs)
for(i in 1:n){
if(index[i] == 1){
x <- paste0(x, sample(LETTERS, 1))
}
else{
x <- paste0(x, sample(0:9, 1))
}
}
paste0(x)
}
codeFunction(5)
codeFunction(5)
codeFunction(5)
d <- load("~/Documents/VignetteStuff/ResultsAndPlots/Results20190228.Rda")
tauPar <- function(par = 0, dist = "gamma", output = "tau", type = "alpha"){
if(dist == "gamma"){
if(output == "tau"){
return(par / (2 + par))
}
else if(output == "par"){
return(2*par / (1-par))
}
else{
stop("output has to be either 'tau' or 'par'")
}
}
else if(dist == "posstab"){
if(type == "alpha"){
return(1 - par)
}
else if(type == "theta"){
if(output == "tau"){
return(1 - 1 / par)
}
else if(output == "par"){
return(1 / (1-par))
}
else{
stop("type has to be either 'alpha' or 'theta'")
}
}
else{
stop("output has to be either 'tau' or 'par'")
}
}
else if(dist == "invgauss"){
laplace <- function(alpha){
L <- function(s) exp(alpha - sqrt(alpha) * sqrt(2*s + alpha))
LL <- function(s){
exp(alpha) * (-sqrt(alpha)) * (exp(-sqrt(alpha)*sqrt(2*s+alpha))*(-sqrt(alpha)) / (2*s+alpha) -
exp(-sqrt(alpha)*sqrt(2*s+alpha))*(2*s+alpha)^(-3/2))
}
f <- function(s) s*L(s)*LL(s)
4 * integrate(f, 0, Inf)$value - 1
}
if(output == "tau"){
if(type == "alpha"){
laplace(par)
}
else if(type == "theta"){
laplace(1/par)
}
else{
stop("type has to be either 'alpha' or 'theta'")
}
}
else if(output == "par"){
if(type == "alpha"){
uniroot(function(alpha) laplace(alpha) - par, interval = c(.0001, 100))$root
}
else if(type == "theta"){
1 / uniroot(function(alpha) laplace(alpha) - par, interval = c(.0001, 100))$root
}
else{
stop("type has to be either 'alpha' or 'theta'")
}
}
else{
stop("output has to be either 'tau' or 'par'")
}
}
else{"dist has to be either 'gamma', 'posstab' or 'invgauss'"}
}
tauPar(par = .23, output = "par")
tauPar(par = .23, output = "par", type = "theta")
tauPar(par = .23, output = "par", type = "alpha")
tauPar(par = .23, output = "par", dist = "invgauss")
tauPar(par = .9665, dist = "invgauss")
tauPar(par = .966506, dist = "invgauss")
impliedTailDependence <- function(q, par, dist = "gamma", type = "alpha", tail = "lwr"){
if(dist == "gamma"){
if(tail == "lwr"){
((2*(1-q)^(-par) - 1)^(-1/par) + 2*q - 1) / q
}
else if(tail == "upr"){
(2*(1-q)^(-par)-1)^(-1/par)/ (1-q)
}
else{
stop("tail has to be either 'lwr' or 'upr'")
}
}
else if(dist == "posstab"){
if(type == "theta"){
par <- 1/par
}
if(tail == "lwr"){
(exp(-(2*(-log(1-q))^(1/par))^par) + 2*q - 1) / q
}
else if(tail == "upr"){
exp(-(2*(-log(1-q))^(1/par))^par)/ (1-q)
}
else{
stop("tail has to be either 'lwr' or 'upr'")
}
}
else if(dist == "invgauss"){
if(type == "theta"){
par <- 1/par
}
if(tail == "lwr"){
invgausstheolwrMZ <- function(q) (exp(par - (par^2 + 2 * log(1-q) * (log(1-q) - 2 * par))^.5) + 2 * q - 1) / q
}
else if(tail == "upr"){
exp(par - (par^2 + 2*log(1-q) * (log(1-q) - 2*par))^.5) / (1-q)
}
else{
stop("tail has to be either 'lwr' or 'upr'")
}
}
}
impliedTailDependence(q = .1, dist = "posstab", tail = "upr")
impliedTailDependence(q = .9, par = tauPar(par = .25,dist = "posstab"), dist = "posstab", tail = "upr")
impliedTailDependence(q = .9, par = tauPar(par = .25,dist = "posstab", output = "par"), dist = "posstab", tail = "upr")
round(impliedTailDependence(q = .9, par = tauPar(par = .25,dist = "posstab", output = "par"), dist = "posstab", tail = "upr"), 3)
round(impliedTailDependence(q = .9, par = tauPar(par = .5,dist = "posstab", output = "par"), dist = "posstab", tail = "upr"), 3)
round(impliedTailDependence(q = .9, par = tauPar(par = .75,dist = "posstab", output = "par"), dist = "posstab", tail = "upr"), 3)
round(impliedTailDependence(q = .8, par = tauPar(par = .25,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .8, par = tauPar(par = .5,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .8, par = tauPar(par = .75,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .2, par = tauPar(par = .25,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .2, par = tauPar(par = .5,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .2, par = tauPar(par = .75,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
exp(1.4)
round(exp(1.4),2)
2+2
2+2
update.packages(ask = FALSE, checkBuilt = TRUE)
q()
setwd("~/Dropbox/RPackage/biSurv")
library(devtools)
library(tools)
library(Rcpp)
compileAttributes(verbose = T)
build()
install(build_vignettes = T)
library(biSurv)
?frailtyem
library(frailtyEM)
?emfrail
build()
install(build_vignettes = T)
seq(0,.97,.01)
chrdiff <- function(x, y, xstatus, ystatus, par, dist = "gamma", type = "alpha", n = 5){
imp <- CHR(x,y,xstatus,ystatus, n = n)
imp0 <- numeric(97)
breaks <- seq(0,1,length.out=n+1)
for(i in 1:(n-1)){
imp0[(1+(i-1)*100/n):(i*100/n)] <- imp[i]
}
imp0[(1+(n-1)*100/n):97] <- imp[n]
theo <- CHRtheo(par, dist = disk, type = type)
sum((imp0 - theo)^2)
}
chrdiff(x,y,xstatus,ystatus,.5)
par <- m$history$frailty(id)
par <- m$history$frailty(id)
par <- m$history
m$history
par <- m$history$frailty(id)$theta
 m$history$frailty(id)$theta
 m$history$frailty(id)
 m$history$`frailty(id)`
 m$history$`frailty(id)`$theta
CHR
chr
CHRtheo
CHR
library(devtools)
build()
install(build_vignettes=TRUE)
library(biSurv)
CHR
?CHR
document()
document()
document()
build()
install(build_vignettes=TRUE)
library(biSurv)
?CHR
?chr
2+2
document()
build()
install(build_vignettes=TRUE)
?CHR
?chr
?chr
2+2
getwd()
library(tools)
compileAttributes()
compileAttributes(verbose=TRUE)
compileAttributes(verbose=TRUE)
document()
build()
install(build_vignettes=TRUE)
document()
build()
install(build_vignettes=TRUE)
build()
install(build_vignettes=TRUE)
compileAttributes(verbose=TRUE)
build()
install(build_vignettes=TRUE)
document()
codeFunction2(seedFunc('github'))
library(biSurv)
?CHR
?chrCpp
getwd()
document()
build()
install(build_vignettes=TRUE)
library(biSurv)
?chrcpp
?chrCpp
?dabrowska
q()
n
