x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
x[i] <- (index[i] == 1) * sample(LETTERS, 1) + (index[i] == 0) * sample(0:9, 1)
}
index[1] == 1
index
codeFunction <- function(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
if(index[i] == 1){
x[i] <- sample(LETTERS, 1)
}
else{
x[i] <- sample(0:9, 1)
}
}
x
}
codeFunction(5)
codeFunction <- function(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
if(index[i] == 1){
x[i] <- sample(LETTERS, 1)
}
else{
x[i] <- sample(0:9, 1)
}
}
paste(x)
}
codeFunction(5)
codeFunction <- function(n){
x <- rep(NA, n)
index <- rbinom(n, 1,.5)
for(i in 1:n){
if(index[i] == 1){
x[i] <- sample(LETTERS, 1)
}
else{
x[i] <- sample(0:9, 1)
}
}
paste0(x)
}
codeFunction(5)
x <- ""
paste0(x, "2")
paste0(x, "2", "4")
codeFunction <- function(n){
x <- ""
index <- rbinom(n, 1,.5)
for(i in 1:n){
if(index[i] == 1){
x <- paste0(x, sample(LETTERS, 1))
}
else{
x <- paste0(x, sample(0:9, 1))
}
}
paste0(x)
}
codeFunction(5)
?rbinom
codeFunction <- function(n, probs = .5){
x <- ""
index <- rbinom(n, 1, prob = probs)
for(i in 1:n){
if(index[i] == 1){
x <- paste0(x, sample(LETTERS, 1))
}
else{
x <- paste0(x, sample(0:9, 1))
}
}
paste0(x)
}
codeFunction(5)
codeFunction <- function(n, probs = .5, nr = 1){
set.seed(nr)
x <- ""
index <- rbinom(n, 1, prob = probs)
for(i in 1:n){
if(index[i] == 1){
x <- paste0(x, sample(LETTERS, 1))
}
else{
x <- paste0(x, sample(0:9, 1))
}
}
paste0(x)
}
codeFunction(5)
codeFunction(5)
codeFunction(5)
d <- load("~/Documents/VignetteStuff/ResultsAndPlots/Results20190228.Rda")
tauPar <- function(par = 0, dist = "gamma", output = "tau", type = "alpha"){
if(dist == "gamma"){
if(output == "tau"){
return(par / (2 + par))
}
else if(output == "par"){
return(2*par / (1-par))
}
else{
stop("output has to be either 'tau' or 'par'")
}
}
else if(dist == "posstab"){
if(type == "alpha"){
return(1 - par)
}
else if(type == "theta"){
if(output == "tau"){
return(1 - 1 / par)
}
else if(output == "par"){
return(1 / (1-par))
}
else{
stop("type has to be either 'alpha' or 'theta'")
}
}
else{
stop("output has to be either 'tau' or 'par'")
}
}
else if(dist == "invgauss"){
laplace <- function(alpha){
L <- function(s) exp(alpha - sqrt(alpha) * sqrt(2*s + alpha))
LL <- function(s){
exp(alpha) * (-sqrt(alpha)) * (exp(-sqrt(alpha)*sqrt(2*s+alpha))*(-sqrt(alpha)) / (2*s+alpha) -
exp(-sqrt(alpha)*sqrt(2*s+alpha))*(2*s+alpha)^(-3/2))
}
f <- function(s) s*L(s)*LL(s)
4 * integrate(f, 0, Inf)$value - 1
}
if(output == "tau"){
if(type == "alpha"){
laplace(par)
}
else if(type == "theta"){
laplace(1/par)
}
else{
stop("type has to be either 'alpha' or 'theta'")
}
}
else if(output == "par"){
if(type == "alpha"){
uniroot(function(alpha) laplace(alpha) - par, interval = c(.0001, 100))$root
}
else if(type == "theta"){
1 / uniroot(function(alpha) laplace(alpha) - par, interval = c(.0001, 100))$root
}
else{
stop("type has to be either 'alpha' or 'theta'")
}
}
else{
stop("output has to be either 'tau' or 'par'")
}
}
else{"dist has to be either 'gamma', 'posstab' or 'invgauss'"}
}
tauPar(par = .23, output = "par")
tauPar(par = .23, output = "par", type = "theta")
tauPar(par = .23, output = "par", type = "alpha")
tauPar(par = .23, output = "par", dist = "invgauss")
tauPar(par = .9665, dist = "invgauss")
tauPar(par = .966506, dist = "invgauss")
impliedTailDependence <- function(q, par, dist = "gamma", type = "alpha", tail = "lwr"){
if(dist == "gamma"){
if(tail == "lwr"){
((2*(1-q)^(-par) - 1)^(-1/par) + 2*q - 1) / q
}
else if(tail == "upr"){
(2*(1-q)^(-par)-1)^(-1/par)/ (1-q)
}
else{
stop("tail has to be either 'lwr' or 'upr'")
}
}
else if(dist == "posstab"){
if(type == "theta"){
par <- 1/par
}
if(tail == "lwr"){
(exp(-(2*(-log(1-q))^(1/par))^par) + 2*q - 1) / q
}
else if(tail == "upr"){
exp(-(2*(-log(1-q))^(1/par))^par)/ (1-q)
}
else{
stop("tail has to be either 'lwr' or 'upr'")
}
}
else if(dist == "invgauss"){
if(type == "theta"){
par <- 1/par
}
if(tail == "lwr"){
invgausstheolwrMZ <- function(q) (exp(par - (par^2 + 2 * log(1-q) * (log(1-q) - 2 * par))^.5) + 2 * q - 1) / q
}
else if(tail == "upr"){
exp(par - (par^2 + 2*log(1-q) * (log(1-q) - 2*par))^.5) / (1-q)
}
else{
stop("tail has to be either 'lwr' or 'upr'")
}
}
}
impliedTailDependence(q = .1, dist = "posstab", tail = "upr")
impliedTailDependence(q = .9, par = tauPar(par = .25,dist = "posstab"), dist = "posstab", tail = "upr")
impliedTailDependence(q = .9, par = tauPar(par = .25,dist = "posstab", output = "par"), dist = "posstab", tail = "upr")
round(impliedTailDependence(q = .9, par = tauPar(par = .25,dist = "posstab", output = "par"), dist = "posstab", tail = "upr"), 3)
round(impliedTailDependence(q = .9, par = tauPar(par = .5,dist = "posstab", output = "par"), dist = "posstab", tail = "upr"), 3)
round(impliedTailDependence(q = .9, par = tauPar(par = .75,dist = "posstab", output = "par"), dist = "posstab", tail = "upr"), 3)
round(impliedTailDependence(q = .8, par = tauPar(par = .25,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .8, par = tauPar(par = .5,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .8, par = tauPar(par = .75,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .2, par = tauPar(par = .25,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .2, par = tauPar(par = .5,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
round(impliedTailDependence(q = .2, par = tauPar(par = .75,dist = "posstab", output = "par"), dist = "posstab", tail = "lwr"), 3)
exp(1.4)
round(exp(1.4),2)
2+2
2+2
update.packages(ask = FALSE, checkBuilt = TRUE)
q()
library(survival)
?predict.coxph
exp(-.4)
round(exp(-.4),2)
?residuals.glm
CHRres <- function(x,y,xstatus,ystatus, weight = "auto"){
h <- hazards(x,y,xstatus,ystatus)
if(weight == "auto"){
weight <- eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
else if(dim(weight) != dim(h$lambda11)){
stop("dim(weight) has to equal dim()")
}
else{
eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
CHRresiduals <- weight * (h$lambda11 - h$lambda10 * h$lambda01)
CHRresiduals[is.nan(CHRresiduals)] <- 0
testStatistic <- -abs(sum(CHRresiduals))
varianceEst <- sum(weight^2 * eyy * h$lambda10 * h$lambda01)
test <- testStatistic / sqrt(varianceEst)
d <- data.frame(testStatistic, test, 2*pnorm(test))
colnames(d) <- c("Test statistic", "Standardized test statistic", "p value")
d
}
library(timereg)
data(diabetes)
x <- diabetes$time[diabetes$treat == 1]
y <- diabetes$time[diabetes$treat == 0]
xstatus <- diabetes$status[diabetes$treat == 1]
ystatus <- diabetes$status[diabetes$treat == 0]
library(biSurv)
tauCens(x,y,xstatus,ystatus)
CHRres(x,y,xstatus,ystatus)
h <- hazards(x,y,xstatus,ystatus)
summary(c(h$lambda11))
getwd()
setwd("~/Dropbox/RPackage/biSurv")
build()
library(devtools)
build()
install(build_vignettes = T)
x <- diabetes$time[diabetes$treat == 1]
y <- diabetes$time[diabetes$treat == 0]
xstatus <- diabetes$status[diabetes$treat == 1]
ystatus <- diabetes$status[diabetes$treat == 0]
tauCens(x,y,xstatus,ystatus)
res <- CHRres(x,y,xstatus,ystatus)
res
m <- coxph(Surv(time, status) ~ cluster(id), data = diabetes)
summary(m)
m <- coxph(Surv(time, status) ~ frailty(id), data = diabetes)
summary(m)
res
CHRres <- function(x,y,xstatus,ystatus, weight = "auto"){
h <- hazards(x,y,xstatus,ystatus)
if(weight == "auto"){
weight <- eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
else if(dim(weight) != dim(h$lambda11)){
stop("dim(weight) has to equal dim()")
}
else{
eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
CHRresiduals <- weight * (h$lambda11 - h$lambda10 * h$lambda01)
CHRresiduals[is.nan(CHRresiduals)] <- 0
testStatistic <- -abs(sum(CHRresiduals))
varianceEst <- sum(weight^2 * eyy * h$lambda10 * h$lambda01)
test <- testStatistic / sqrt(varianceEst)
d <- data.frame(testStatistic, test, 2*pnorm(test))
colnames(d) <- c("Test statistic", "Std. test statistic", "p-value")
d
}
res <- CHRres(x,y,xstatus,ystatus)
res
CHRres <- function(x,y,xstatus,ystatus, weight = "auto"){
h <- hazards(x,y,xstatus,ystatus)
if(weight == "auto"){
weight <- eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
else if(dim(weight) != dim(h$lambda11)){
stop("dim(weight) has to equal dim()")
}
else{
eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
CHRresiduals <- weight * (h$lambda11 - h$lambda10 * h$lambda01)
CHRresiduals[is.nan(CHRresiduals)] <- 0
testStatistic <- -abs(sum(CHRresiduals))
varianceEst <- sum(weight^2 * eyy * h$lambda10 * h$lambda01)
test <- testStatistic / sqrt(varianceEst)
d <- data.frame(testStatistic, sqrt(varianceEst), 2*pnorm(test))
colnames(d) <- c("Test statistic", "SE", "p-value")
d
}
res <- CHRres(x,y,xstatus,ystatus)
res
summary(m)
library(copula)
cop.clayton <- claytonCopula(param = 0, dim = 2, use.indepC = "TRUE")
simClayton <- rCopula(100, cop.clayton)
simClayton
cor(simClayton[,1],simClayton[,2])
cor.test(simClayton[,1],simClayton[,2])
res$`p-value`
nsim <- 1000
pvalues <- numeric(nsim)
nsim <- 1000
pvalues <- numeric(nsim)
for(i in 1:nsim){
cop.clayton <- claytonCopula(param = 0, dim = 2, use.indepC = "TRUE")
simClayton <- rCopula(100, cop.clayton)
xstar <- qexp(simClayton[,1])
ystar <- qexp(simClayton[,2])
xc <- rexp(100, .3)
yc <- rexp(100, .3)
x <- pmin(xstar, xc)
y <- pmin(ystar, yc)
xstatus <- (xstar <= xc)
ystatus <- (ystar <= yc)
pvalues[i] <- CHRres(x,y,xstatus,ystatus)$`p-value`
}
for(i in 1:nsim){
if(i%%10){print(i)}
cop.clayton <- claytonCopula(param = 0, dim = 2, use.indepC = "TRUE")
simClayton <- rCopula(100, cop.clayton)
xstar <- qexp(simClayton[,1])
ystar <- qexp(simClayton[,2])
xc <- rexp(100, .3)
yc <- rexp(100, .3)
x <- pmin(xstar, xc)
y <- pmin(ystar, yc)
xstatus <- (xstar <= xc)
ystatus <- (ystar <= yc)
pvalues[i] <- CHRres(x,y,xstatus,ystatus)$`p-value`
}
summary(pvalues)
CHRres <- function(x,y,xstatus,ystatus, weight = "auto"){
h <- hazards(x,y,xstatus,ystatus)
if(weight == "auto"){
weight <- eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
else if(dim(weight) != dim(h$lambda11)){
stop("dim(weight) has to equal dim()")
}
else{
eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
CHRresiduals <- weight * (h$lambda11 - h$lambda10 * h$lambda01)
CHRresiduals[is.nan(CHRresiduals)] <- 0
testStatistic <- -abs(sum(CHRresiduals))
varianceEst <- sum(weight^2 * eyy * h$lambda10 * h$lambda01) / length(x)
test <- testStatistic / sqrt(varianceEst)
d <- data.frame(testStatistic, sqrt(varianceEst), 2*pnorm(test))
colnames(d) <- c("Test statistic", "SE", "p-value")
d
}
nsim <- 1000
pvalues <- numeric(nsim)
for(i in 1:nsim){
if(i%%10 == 0){print(i)}
cop.clayton <- claytonCopula(param = 0, dim = 2, use.indepC = "TRUE")
simClayton <- rCopula(100, cop.clayton)
xstar <- qexp(simClayton[,1])
ystar <- qexp(simClayton[,2])
xc <- rexp(100, .3)
yc <- rexp(100, .3)
x <- pmin(xstar, xc)
y <- pmin(ystar, yc)
xstatus <- (xstar <= xc)
ystatus <- (ystar <= yc)
pvalues[i] <- CHRres(x,y,xstatus,ystatus)$`p-value`
}
summary(pvalues)
res <- CHRres(x,y,xstatus,ystatus)
res
CHRres <- function(x,y,xstatus,ystatus, weight = "auto"){
h <- hazards(x,y,xstatus,ystatus)
if(weight == "auto"){
weight <- eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
else if(dim(weight) != dim(h$lambda11)){
stop("dim(weight) has to equal dim()")
}
else{
eyy <- eyyfunc(x,y,sort_unique(x),sort_unique(y))
}
CHRresiduals <- weight * (h$lambda11 - h$lambda10 * h$lambda01)
CHRresiduals[is.nan(CHRresiduals)] <- 0
testStatistic <- sum(CHRresiduals)
varianceEst <- sum(weight^2 * eyy * h$lambda10 * h$lambda01) / length(x)
test <- -abs(testStatistic) / sqrt(varianceEst)
d <- data.frame(testStatistic, sqrt(varianceEst), 2*pnorm(test))
colnames(d) <- c("Test statistic", "SE", "p-value")
d
}
res <- CHRres(x,y,xstatus,ystatus)
res
pnorm(res[1] / res[2])*2
pnorm(res[1] / res[2])
res[1]
res[1]/res[2]
pnorm(res[1]/res[2])
pnorm(.5)
type(res[1]/res[2])
class(res[1]/res[2])
pnorm(as.numeric(res[1]/res[2]))
pnorm(as.numeric(res[1]/res[2]))*2
res <- CHRres(x,y,xstatus,ystatus)
res
summary(pvalues)
sum(pvalues == 0)
min(pvalues)
mean(pvalues < .05)
res
plot.comprisk
?plot
plot
library(Rcpp)
cppFunction(NumericVector fisk(NumericVector x){
NumericVector y = fastR::sort_unique(x);
return y;
})
cppFunction(NumericVector fisk(NumericVector x){
NumericVector y = fastR::sort_unique(x);
return y;
})
cppFunction('NumericVector fisk(NumericVector x){
NumericVector y = fastR::sort_unique(x);
return y;
}')
cppFunction('NumericVector fisk(NumericVector x){
Environment fastR = Environment::namespace_env("fastR");
Function sortuni = fastR["sort_unique"];
NumericVector y = sortuni(x);
return y;
}')
sourceCpp('minmat.cpp')
setwd("~/Dropbox/RPackage/biSurv/src")
sourceCpp('minmat.cpp')
sourceCpp('minmat.cpp')
sourceCpp('minmat.cpp')
sourceCpp('minmat.cpp')
sourceCpp('minmat.cpp')
sourceCpp('minmat.cpp')
?outer
x <- rpois(5)
x <- rpois(5, lambda = 1)
y <- rpois(5, lambda = 1)
x
y
outer(x,y, min)
outer(x,y, FUN = min)
outer
outer(x,y, FUN = +)
outer(x,y, FUN = "+")
outer(x,y, FUN = "min")
x
y
outer(x,y, FUN = "pmin")
outer(y,y,"pmin")
y
y <- rpois(5, lambda = 20)
y
outer(y,y,"pmin")
kat <- function(x,y){if(x>y){50}else{20}}
kat(20,30)
kat(40,30)
kat(25,30)
x
y
outer(x,y, "sum")
outer(x,y, "+")
x %o% y
outer(x,y, "*")
S <- matrix(1:30, nrow = 5, ncol = 5)
S
outer(x,y, function(x,y){sum(S[S == x, S == y])})
